/*
 * generated by Xtext 2.25.0
 */
package org.xtext.mdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MdslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.Model");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		//Model: (declarations+=Declaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(declarations+=Declaration)*
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSoftwareParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cServiceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRuleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEventParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Declaration : System | Software | Mode | Service | Action | Rule | Event;
		@Override public ParserRule getRule() { return rule; }
		
		//System | Software | Mode | Service | Action | Rule | Event
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//System
		public RuleCall getSystemParserRuleCall_0() { return cSystemParserRuleCall_0; }
		
		//Software
		public RuleCall getSoftwareParserRuleCall_1() { return cSoftwareParserRuleCall_1; }
		
		//Mode
		public RuleCall getModeParserRuleCall_2() { return cModeParserRuleCall_2; }
		
		//Service
		public RuleCall getServiceParserRuleCall_3() { return cServiceParserRuleCall_3; }
		
		//Action
		public RuleCall getActionParserRuleCall_4() { return cActionParserRuleCall_4; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_5() { return cRuleParserRuleCall_5; }
		
		//Event
		public RuleCall getEventParserRuleCall_6() { return cEventParserRuleCall_6; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFollowingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cModesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cModesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final CrossReference cModesModeCrossReference_5_0_0 = (CrossReference)cModesAssignment_5_0.eContents().get(0);
		private final RuleCall cModesModeIDTerminalRuleCall_5_0_0_1 = (RuleCall)cModesModeCrossReference_5_0_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cModesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final CrossReference cModesModeCrossReference_5_1_1_0 = (CrossReference)cModesAssignment_5_1_1.eContents().get(0);
		private final RuleCall cModesModeIDTerminalRuleCall_5_1_1_0_1 = (RuleCall)cModesModeCrossReference_5_1_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOperatingSystemKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOperatingSystemAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOperatingSystemSUPPORTED_OPERATING_SYSTEMSEnumRuleCall_6_1_0 = (RuleCall)cOperatingSystemAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDistributionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDistributionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDistributionSUPPORTED_DISTRIBUTIONSEnumRuleCall_7_1_0 = (RuleCall)cDistributionAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReleaseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReleaseAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReleaseSUPPORTED_RELEASESEnumRuleCall_8_1_0 = (RuleCall)cReleaseAssignment_8_1.eContents().get(0);
		
		//System :
		//    'System' name=ID 'has' 'following' 'modes'
		//        (modes+=[Mode] (',' modes+=[Mode])*)?
		//    ('operatingSystem' operatingSystem=SUPPORTED_OPERATING_SYSTEMS)?
		//    ('distribution' distribution=SUPPORTED_DISTRIBUTIONS)?
		//    ('release' release=SUPPORTED_RELEASES)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'System' name=ID 'has' 'following' 'modes'
		//    (modes+=[Mode] (',' modes+=[Mode])*)?
		//('operatingSystem' operatingSystem=SUPPORTED_OPERATING_SYSTEMS)?
		//('distribution' distribution=SUPPORTED_DISTRIBUTIONS)?
		//('release' release=SUPPORTED_RELEASES)?
		public Group getGroup() { return cGroup; }
		
		//'System'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'has'
		public Keyword getHasKeyword_2() { return cHasKeyword_2; }
		
		//'following'
		public Keyword getFollowingKeyword_3() { return cFollowingKeyword_3; }
		
		//'modes'
		public Keyword getModesKeyword_4() { return cModesKeyword_4; }
		
		//(modes+=[Mode] (',' modes+=[Mode])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//modes+=[Mode]
		public Assignment getModesAssignment_5_0() { return cModesAssignment_5_0; }
		
		//[Mode]
		public CrossReference getModesModeCrossReference_5_0_0() { return cModesModeCrossReference_5_0_0; }
		
		//ID
		public RuleCall getModesModeIDTerminalRuleCall_5_0_0_1() { return cModesModeIDTerminalRuleCall_5_0_0_1; }
		
		//(',' modes+=[Mode])*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//modes+=[Mode]
		public Assignment getModesAssignment_5_1_1() { return cModesAssignment_5_1_1; }
		
		//[Mode]
		public CrossReference getModesModeCrossReference_5_1_1_0() { return cModesModeCrossReference_5_1_1_0; }
		
		//ID
		public RuleCall getModesModeIDTerminalRuleCall_5_1_1_0_1() { return cModesModeIDTerminalRuleCall_5_1_1_0_1; }
		
		//('operatingSystem' operatingSystem=SUPPORTED_OPERATING_SYSTEMS)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'operatingSystem'
		public Keyword getOperatingSystemKeyword_6_0() { return cOperatingSystemKeyword_6_0; }
		
		//operatingSystem=SUPPORTED_OPERATING_SYSTEMS
		public Assignment getOperatingSystemAssignment_6_1() { return cOperatingSystemAssignment_6_1; }
		
		//SUPPORTED_OPERATING_SYSTEMS
		public RuleCall getOperatingSystemSUPPORTED_OPERATING_SYSTEMSEnumRuleCall_6_1_0() { return cOperatingSystemSUPPORTED_OPERATING_SYSTEMSEnumRuleCall_6_1_0; }
		
		//('distribution' distribution=SUPPORTED_DISTRIBUTIONS)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'distribution'
		public Keyword getDistributionKeyword_7_0() { return cDistributionKeyword_7_0; }
		
		//distribution=SUPPORTED_DISTRIBUTIONS
		public Assignment getDistributionAssignment_7_1() { return cDistributionAssignment_7_1; }
		
		//SUPPORTED_DISTRIBUTIONS
		public RuleCall getDistributionSUPPORTED_DISTRIBUTIONSEnumRuleCall_7_1_0() { return cDistributionSUPPORTED_DISTRIBUTIONSEnumRuleCall_7_1_0; }
		
		//('release' release=SUPPORTED_RELEASES)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'release'
		public Keyword getReleaseKeyword_8_0() { return cReleaseKeyword_8_0; }
		
		//release=SUPPORTED_RELEASES
		public Assignment getReleaseAssignment_8_1() { return cReleaseAssignment_8_1; }
		
		//SUPPORTED_RELEASES
		public RuleCall getReleaseSUPPORTED_RELEASESEnumRuleCall_8_1_0() { return cReleaseSUPPORTED_RELEASESEnumRuleCall_8_1_0; }
	}
	public class SoftwareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.Software");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSoftwareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVendorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVendorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVendorSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cVendorAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cProductKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cProductAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cProductSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cProductAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVersionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVersionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cVersionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPackageKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPackageAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPackageSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cPackageAssignment_5_1.eContents().get(0);
		
		//Software :
		//    'Software' name=ID //software with a dot in the name should be specified in the package e.g. php7 package "php7.3"
		//    ('vendor' vendor=STRING)?
		//    ('product' product=STRING)?
		//    ('version' version=STRING)?
		//    ('package' package=STRING)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Software' name=ID //software with a dot in the name should be specified in the package e.g. php7 package "php7.3"
		//('vendor' vendor=STRING)?
		//('product' product=STRING)?
		//('version' version=STRING)?
		//('package' package=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'Software'
		public Keyword getSoftwareKeyword_0() { return cSoftwareKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		////software with a dot in the name should be specified in the package e.g. php7 package "php7.3"
		//   ('vendor' vendor=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'vendor'
		public Keyword getVendorKeyword_2_0() { return cVendorKeyword_2_0; }
		
		//vendor=STRING
		public Assignment getVendorAssignment_2_1() { return cVendorAssignment_2_1; }
		
		//STRING
		public RuleCall getVendorSTRINGTerminalRuleCall_2_1_0() { return cVendorSTRINGTerminalRuleCall_2_1_0; }
		
		//('product' product=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'product'
		public Keyword getProductKeyword_3_0() { return cProductKeyword_3_0; }
		
		//product=STRING
		public Assignment getProductAssignment_3_1() { return cProductAssignment_3_1; }
		
		//STRING
		public RuleCall getProductSTRINGTerminalRuleCall_3_1_0() { return cProductSTRINGTerminalRuleCall_3_1_0; }
		
		//('version' version=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'version'
		public Keyword getVersionKeyword_4_0() { return cVersionKeyword_4_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_4_1() { return cVersionAssignment_4_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_4_1_0() { return cVersionSTRINGTerminalRuleCall_4_1_0; }
		
		//('package' package=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'package'
		public Keyword getPackageKeyword_5_0() { return cPackageKeyword_5_0; }
		
		//package=STRING
		public Assignment getPackageAssignment_5_1() { return cPackageAssignment_5_1; }
		
		//STRING
		public RuleCall getPackageSTRINGTerminalRuleCall_5_1_0() { return cPackageSTRINGTerminalRuleCall_5_1_0; }
	}
	public class ModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.Mode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperModeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperModeModeCrossReference_2_1_0 = (CrossReference)cSuperModeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperModeModeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperModeModeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cPriorityKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPriorityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPriorityINTTerminalRuleCall_6_0 = (RuleCall)cPriorityAssignment_6.eContents().get(0);
		private final Keyword cStartServicesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cStartServicesAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final CrossReference cStartServicesServiceCrossReference_8_0_0 = (CrossReference)cStartServicesAssignment_8_0.eContents().get(0);
		private final RuleCall cStartServicesServiceIDTerminalRuleCall_8_0_0_1 = (RuleCall)cStartServicesServiceCrossReference_8_0_0.eContents().get(1);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cStartServicesAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final CrossReference cStartServicesServiceCrossReference_8_1_1_0 = (CrossReference)cStartServicesAssignment_8_1_1.eContents().get(0);
		private final RuleCall cStartServicesServiceIDTerminalRuleCall_8_1_1_0_1 = (RuleCall)cStartServicesServiceCrossReference_8_1_1_0.eContents().get(1);
		private final Keyword cStopServicesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cStopServicesAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final CrossReference cStopServicesServiceCrossReference_10_0_0 = (CrossReference)cStopServicesAssignment_10_0.eContents().get(0);
		private final RuleCall cStopServicesServiceIDTerminalRuleCall_10_0_0_1 = (RuleCall)cStopServicesServiceCrossReference_10_0_0.eContents().get(1);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cCommaKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cStopServicesAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final CrossReference cStopServicesServiceCrossReference_10_1_1_0 = (CrossReference)cStopServicesAssignment_10_1_1.eContents().get(0);
		private final RuleCall cStopServicesServiceIDTerminalRuleCall_10_1_1_0_1 = (RuleCall)cStopServicesServiceCrossReference_10_1_1_0.eContents().get(1);
		private final Assignment cEnabledAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cEnabledEnabledEnumRuleCall_11_0 = (RuleCall)cEnabledAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cExchangeableKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cWithKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cAlternativeModeAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final CrossReference cAlternativeModeModeCrossReference_12_2_0 = (CrossReference)cAlternativeModeAssignment_12_2.eContents().get(0);
		private final RuleCall cAlternativeModeModeIDTerminalRuleCall_12_2_0_1 = (RuleCall)cAlternativeModeModeCrossReference_12_2_0.eContents().get(1);
		
		//Mode :
		//    'Mode' name=ID ('extends' superMode=[Mode])?
		//    'description' description=STRING
		//    'priority' priority=INT
		//    'startServices' (startServices+=[Service]
		//        (',' startServices+=[Service])*
		//    )?
		//    'stopServices' (stopServices+=[Service]
		//        (',' stopServices+=[Service])*
		//    )?
		//    (enabled=Enabled)?
		//    ('exchangeable' 'with' alternativeMode=[Mode])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mode' name=ID ('extends' superMode=[Mode])?
		//'description' description=STRING
		//'priority' priority=INT
		//'startServices' (startServices+=[Service]
		//    (',' startServices+=[Service])*
		//)?
		//'stopServices' (stopServices+=[Service]
		//    (',' stopServices+=[Service])*
		//)?
		//(enabled=Enabled)?
		//('exchangeable' 'with' alternativeMode=[Mode])?
		public Group getGroup() { return cGroup; }
		
		//'Mode'
		public Keyword getModeKeyword_0() { return cModeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superMode=[Mode])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superMode=[Mode]
		public Assignment getSuperModeAssignment_2_1() { return cSuperModeAssignment_2_1; }
		
		//[Mode]
		public CrossReference getSuperModeModeCrossReference_2_1_0() { return cSuperModeModeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperModeModeIDTerminalRuleCall_2_1_0_1() { return cSuperModeModeIDTerminalRuleCall_2_1_0_1; }
		
		//'description'
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
		
		//'priority'
		public Keyword getPriorityKeyword_5() { return cPriorityKeyword_5; }
		
		//priority=INT
		public Assignment getPriorityAssignment_6() { return cPriorityAssignment_6; }
		
		//INT
		public RuleCall getPriorityINTTerminalRuleCall_6_0() { return cPriorityINTTerminalRuleCall_6_0; }
		
		//'startServices'
		public Keyword getStartServicesKeyword_7() { return cStartServicesKeyword_7; }
		
		//(startServices+=[Service]
		//       (',' startServices+=[Service])*
		//   )?
		public Group getGroup_8() { return cGroup_8; }
		
		//startServices+=[Service]
		public Assignment getStartServicesAssignment_8_0() { return cStartServicesAssignment_8_0; }
		
		//[Service]
		public CrossReference getStartServicesServiceCrossReference_8_0_0() { return cStartServicesServiceCrossReference_8_0_0; }
		
		//ID
		public RuleCall getStartServicesServiceIDTerminalRuleCall_8_0_0_1() { return cStartServicesServiceIDTerminalRuleCall_8_0_0_1; }
		
		//(',' startServices+=[Service])*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//','
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }
		
		//startServices+=[Service]
		public Assignment getStartServicesAssignment_8_1_1() { return cStartServicesAssignment_8_1_1; }
		
		//[Service]
		public CrossReference getStartServicesServiceCrossReference_8_1_1_0() { return cStartServicesServiceCrossReference_8_1_1_0; }
		
		//ID
		public RuleCall getStartServicesServiceIDTerminalRuleCall_8_1_1_0_1() { return cStartServicesServiceIDTerminalRuleCall_8_1_1_0_1; }
		
		//'stopServices'
		public Keyword getStopServicesKeyword_9() { return cStopServicesKeyword_9; }
		
		//(stopServices+=[Service]
		//       (',' stopServices+=[Service])*
		//   )?
		public Group getGroup_10() { return cGroup_10; }
		
		//stopServices+=[Service]
		public Assignment getStopServicesAssignment_10_0() { return cStopServicesAssignment_10_0; }
		
		//[Service]
		public CrossReference getStopServicesServiceCrossReference_10_0_0() { return cStopServicesServiceCrossReference_10_0_0; }
		
		//ID
		public RuleCall getStopServicesServiceIDTerminalRuleCall_10_0_0_1() { return cStopServicesServiceIDTerminalRuleCall_10_0_0_1; }
		
		//(',' stopServices+=[Service])*
		public Group getGroup_10_1() { return cGroup_10_1; }
		
		//','
		public Keyword getCommaKeyword_10_1_0() { return cCommaKeyword_10_1_0; }
		
		//stopServices+=[Service]
		public Assignment getStopServicesAssignment_10_1_1() { return cStopServicesAssignment_10_1_1; }
		
		//[Service]
		public CrossReference getStopServicesServiceCrossReference_10_1_1_0() { return cStopServicesServiceCrossReference_10_1_1_0; }
		
		//ID
		public RuleCall getStopServicesServiceIDTerminalRuleCall_10_1_1_0_1() { return cStopServicesServiceIDTerminalRuleCall_10_1_1_0_1; }
		
		//(enabled=Enabled)?
		public Assignment getEnabledAssignment_11() { return cEnabledAssignment_11; }
		
		//Enabled
		public RuleCall getEnabledEnabledEnumRuleCall_11_0() { return cEnabledEnabledEnumRuleCall_11_0; }
		
		//('exchangeable' 'with' alternativeMode=[Mode])?
		public Group getGroup_12() { return cGroup_12; }
		
		//'exchangeable'
		public Keyword getExchangeableKeyword_12_0() { return cExchangeableKeyword_12_0; }
		
		//'with'
		public Keyword getWithKeyword_12_1() { return cWithKeyword_12_1; }
		
		//alternativeMode=[Mode]
		public Assignment getAlternativeModeAssignment_12_2() { return cAlternativeModeAssignment_12_2; }
		
		//[Mode]
		public CrossReference getAlternativeModeModeCrossReference_12_2_0() { return cAlternativeModeModeCrossReference_12_2_0; }
		
		//ID
		public RuleCall getAlternativeModeModeIDTerminalRuleCall_12_2_0_1() { return cAlternativeModeModeIDTerminalRuleCall_12_2_0_1; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsesSoftwareKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUsesSoftwareAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cUsesSoftwareSoftwareCrossReference_2_1_0 = (CrossReference)cUsesSoftwareAssignment_2_1.eContents().get(0);
		private final RuleCall cUsesSoftwareSoftwareIDTerminalRuleCall_2_1_0_1 = (RuleCall)cUsesSoftwareSoftwareCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cUsesSoftwareAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cUsesSoftwareSoftwareCrossReference_2_2_1_0 = (CrossReference)cUsesSoftwareAssignment_2_2_1.eContents().get(0);
		private final RuleCall cUsesSoftwareSoftwareIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cUsesSoftwareSoftwareCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cStartActionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartActionsActionWithParamsParserRuleCall_4_0 = (RuleCall)cStartActionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStartActionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStartActionsActionWithParamsParserRuleCall_5_1_0 = (RuleCall)cStartActionsAssignment_5_1.eContents().get(0);
		private final Keyword cStopActionsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStopActionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStopActionsActionWithParamsParserRuleCall_7_0 = (RuleCall)cStopActionsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStopActionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStopActionsActionWithParamsParserRuleCall_8_1_0 = (RuleCall)cStopActionsAssignment_8_1.eContents().get(0);
		
		//Service :
		//    'Service' name=ID
		//    ('usesSoftware' usesSoftware+=[Software] (',' usesSoftware+=[Software])*)?
		//    'startActions' startActions+=ActionWithParams
		//        (',' startActions+=ActionWithParams)*
		//    'stopActions' stopActions+=ActionWithParams
		//        (',' stopActions+=ActionWithParams)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Service' name=ID
		//('usesSoftware' usesSoftware+=[Software] (',' usesSoftware+=[Software])*)?
		//'startActions' startActions+=ActionWithParams
		//    (',' startActions+=ActionWithParams)*
		//'stopActions' stopActions+=ActionWithParams
		//    (',' stopActions+=ActionWithParams)*
		public Group getGroup() { return cGroup; }
		
		//'Service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('usesSoftware' usesSoftware+=[Software] (',' usesSoftware+=[Software])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'usesSoftware'
		public Keyword getUsesSoftwareKeyword_2_0() { return cUsesSoftwareKeyword_2_0; }
		
		//usesSoftware+=[Software]
		public Assignment getUsesSoftwareAssignment_2_1() { return cUsesSoftwareAssignment_2_1; }
		
		//[Software]
		public CrossReference getUsesSoftwareSoftwareCrossReference_2_1_0() { return cUsesSoftwareSoftwareCrossReference_2_1_0; }
		
		//ID
		public RuleCall getUsesSoftwareSoftwareIDTerminalRuleCall_2_1_0_1() { return cUsesSoftwareSoftwareIDTerminalRuleCall_2_1_0_1; }
		
		//(',' usesSoftware+=[Software])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//usesSoftware+=[Software]
		public Assignment getUsesSoftwareAssignment_2_2_1() { return cUsesSoftwareAssignment_2_2_1; }
		
		//[Software]
		public CrossReference getUsesSoftwareSoftwareCrossReference_2_2_1_0() { return cUsesSoftwareSoftwareCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getUsesSoftwareSoftwareIDTerminalRuleCall_2_2_1_0_1() { return cUsesSoftwareSoftwareIDTerminalRuleCall_2_2_1_0_1; }
		
		//'startActions'
		public Keyword getStartActionsKeyword_3() { return cStartActionsKeyword_3; }
		
		//startActions+=ActionWithParams
		public Assignment getStartActionsAssignment_4() { return cStartActionsAssignment_4; }
		
		//ActionWithParams
		public RuleCall getStartActionsActionWithParamsParserRuleCall_4_0() { return cStartActionsActionWithParamsParserRuleCall_4_0; }
		
		//(',' startActions+=ActionWithParams)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//startActions+=ActionWithParams
		public Assignment getStartActionsAssignment_5_1() { return cStartActionsAssignment_5_1; }
		
		//ActionWithParams
		public RuleCall getStartActionsActionWithParamsParserRuleCall_5_1_0() { return cStartActionsActionWithParamsParserRuleCall_5_1_0; }
		
		//'stopActions'
		public Keyword getStopActionsKeyword_6() { return cStopActionsKeyword_6; }
		
		//stopActions+=ActionWithParams
		public Assignment getStopActionsAssignment_7() { return cStopActionsAssignment_7; }
		
		//ActionWithParams
		public RuleCall getStopActionsActionWithParamsParserRuleCall_7_0() { return cStopActionsActionWithParamsParserRuleCall_7_0; }
		
		//(',' stopActions+=ActionWithParams)*
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//stopActions+=ActionWithParams
		public Assignment getStopActionsAssignment_8_1() { return cStopActionsAssignment_8_1; }
		
		//ActionWithParams
		public RuleCall getStopActionsActionWithParamsParserRuleCall_8_1_0() { return cStopActionsActionWithParamsParserRuleCall_8_1_0; }
	}
	public class ActionWithParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.ActionWithParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActionActionCrossReference_0_0 = (CrossReference)cActionAssignment_0.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_0_0_1 = (RuleCall)cActionActionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActionWithParams :
		//    action=[Action]'('(params+=STRING (',' params+=STRING)*)?')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//action=[Action]'('(params+=STRING (',' params+=STRING)*)?')'
		public Group getGroup() { return cGroup; }
		
		//action=[Action]
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//[Action]
		public CrossReference getActionActionCrossReference_0_0() { return cActionActionCrossReference_0_0; }
		
		//ID
		public RuleCall getActionActionIDTerminalRuleCall_0_0_1() { return cActionActionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(params+=STRING (',' params+=STRING)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//params+=STRING
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }
		
		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_2_0_0() { return cParamsSTRINGTerminalRuleCall_2_0_0; }
		
		//(',' params+=STRING)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//params+=STRING
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }
		
		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_2_1_1_0() { return cParamsSTRINGTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperActionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperActionActionCrossReference_2_1_0 = (CrossReference)cSuperActionAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperActionActionIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperActionActionCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDescriptionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cShellCmdKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cShellCmdAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cShellCmdSTRINGTerminalRuleCall_4_0_1_0 = (RuleCall)cShellCmdAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cParamsKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsSTRINGTerminalRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cParamsSTRINGTerminalRuleCall_4_1_2_1_0 = (RuleCall)cParamsAssignment_4_1_2_1.eContents().get(0);
		
		//Action :
		//    'Action' name=ID ('extends' superAction=[Action])?
		//    ('description' description=STRING)?
		//    (('shellCmd' shellCmd=STRING)|('params' params+=STRING (',' params+=STRING)*))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Action' name=ID ('extends' superAction=[Action])?
		//('description' description=STRING)?
		//(('shellCmd' shellCmd=STRING)|('params' params+=STRING (',' params+=STRING)*))
		public Group getGroup() { return cGroup; }
		
		//'Action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superAction=[Action])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superAction=[Action]
		public Assignment getSuperActionAssignment_2_1() { return cSuperActionAssignment_2_1; }
		
		//[Action]
		public CrossReference getSuperActionActionCrossReference_2_1_0() { return cSuperActionActionCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperActionActionIDTerminalRuleCall_2_1_0_1() { return cSuperActionActionIDTerminalRuleCall_2_1_0_1; }
		
		//('description' description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_0() { return cDescriptionKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
		
		//(('shellCmd' shellCmd=STRING)|('params' params+=STRING (',' params+=STRING)*))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//('shellCmd' shellCmd=STRING)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'shellCmd'
		public Keyword getShellCmdKeyword_4_0_0() { return cShellCmdKeyword_4_0_0; }
		
		//shellCmd=STRING
		public Assignment getShellCmdAssignment_4_0_1() { return cShellCmdAssignment_4_0_1; }
		
		//STRING
		public RuleCall getShellCmdSTRINGTerminalRuleCall_4_0_1_0() { return cShellCmdSTRINGTerminalRuleCall_4_0_1_0; }
		
		//('params' params+=STRING (',' params+=STRING)*)
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'params'
		public Keyword getParamsKeyword_4_1_0() { return cParamsKeyword_4_1_0; }
		
		//params+=STRING
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_4_1_1_0() { return cParamsSTRINGTerminalRuleCall_4_1_1_0; }
		
		//(',' params+=STRING)*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }
		
		//','
		public Keyword getCommaKeyword_4_1_2_0() { return cCommaKeyword_4_1_2_0; }
		
		//params+=STRING
		public Assignment getParamsAssignment_4_1_2_1() { return cParamsAssignment_4_1_2_1; }
		
		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_4_1_2_1_0() { return cParamsSTRINGTerminalRuleCall_4_1_2_1_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cIfEventCrossReference_3_0 = (CrossReference)cIfAssignment_3.eContents().get(0);
		private final RuleCall cIfEventIDTerminalRuleCall_3_0_1 = (RuleCall)cIfEventCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAndKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cCurrentKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cModeKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cInKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cCurrentModeAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final CrossReference cCurrentModeModeCrossReference_4_5_0 = (CrossReference)cCurrentModeAssignment_4_5.eContents().get(0);
		private final RuleCall cCurrentModeModeIDTerminalRuleCall_4_5_0_1 = (RuleCall)cCurrentModeModeCrossReference_4_5_0.eContents().get(1);
		private final Group cGroup_4_6 = (Group)cGroup_4.eContents().get(6);
		private final Keyword cCommaKeyword_4_6_0 = (Keyword)cGroup_4_6.eContents().get(0);
		private final Assignment cModesAssignment_4_6_1 = (Assignment)cGroup_4_6.eContents().get(1);
		private final CrossReference cModesModeCrossReference_4_6_1_0 = (CrossReference)cModesAssignment_4_6_1.eContents().get(0);
		private final RuleCall cModesModeIDTerminalRuleCall_4_6_1_0_1 = (RuleCall)cModesModeCrossReference_4_6_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_7 = (Keyword)cGroup_4.eContents().get(7);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cThenModeCrossReference_6_0 = (CrossReference)cThenAssignment_6.eContents().get(0);
		private final RuleCall cThenModeIDTerminalRuleCall_6_0_1 = (RuleCall)cThenModeCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cElseAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cElseModeCrossReference_7_1_0 = (CrossReference)cElseAssignment_7_1.eContents().get(0);
		private final RuleCall cElseModeIDTerminalRuleCall_7_1_0_1 = (RuleCall)cElseModeCrossReference_7_1_0.eContents().get(1);
		
		//Rule :
		//    'Rule' description=STRING
		//        'if' if+=[Event]
		//        ('and' 'current' 'mode' 'in' '('currentMode+=[Mode]
		//            (',' modes+=[Mode])*')'
		//        )?
		//        'then' then=[Mode]
		//        ('else' else=[Mode])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Rule' description=STRING
		//    'if' if+=[Event]
		//    ('and' 'current' 'mode' 'in' '('currentMode+=[Mode]
		//        (',' modes+=[Mode])*')'
		//    )?
		//    'then' then=[Mode]
		//    ('else' else=[Mode])?
		public Group getGroup() { return cGroup; }
		
		//'Rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
		
		//'if'
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }
		
		//if+=[Event]
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }
		
		//[Event]
		public CrossReference getIfEventCrossReference_3_0() { return cIfEventCrossReference_3_0; }
		
		//ID
		public RuleCall getIfEventIDTerminalRuleCall_3_0_1() { return cIfEventIDTerminalRuleCall_3_0_1; }
		
		//('and' 'current' 'mode' 'in' '('currentMode+=[Mode]
		//    (',' modes+=[Mode])*')'
		//)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'and'
		public Keyword getAndKeyword_4_0() { return cAndKeyword_4_0; }
		
		//'current'
		public Keyword getCurrentKeyword_4_1() { return cCurrentKeyword_4_1; }
		
		//'mode'
		public Keyword getModeKeyword_4_2() { return cModeKeyword_4_2; }
		
		//'in'
		public Keyword getInKeyword_4_3() { return cInKeyword_4_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_4() { return cLeftParenthesisKeyword_4_4; }
		
		//currentMode+=[Mode]
		public Assignment getCurrentModeAssignment_4_5() { return cCurrentModeAssignment_4_5; }
		
		//[Mode]
		public CrossReference getCurrentModeModeCrossReference_4_5_0() { return cCurrentModeModeCrossReference_4_5_0; }
		
		//ID
		public RuleCall getCurrentModeModeIDTerminalRuleCall_4_5_0_1() { return cCurrentModeModeIDTerminalRuleCall_4_5_0_1; }
		
		//(',' modes+=[Mode])*
		public Group getGroup_4_6() { return cGroup_4_6; }
		
		//','
		public Keyword getCommaKeyword_4_6_0() { return cCommaKeyword_4_6_0; }
		
		//modes+=[Mode]
		public Assignment getModesAssignment_4_6_1() { return cModesAssignment_4_6_1; }
		
		//[Mode]
		public CrossReference getModesModeCrossReference_4_6_1_0() { return cModesModeCrossReference_4_6_1_0; }
		
		//ID
		public RuleCall getModesModeIDTerminalRuleCall_4_6_1_0_1() { return cModesModeIDTerminalRuleCall_4_6_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_7() { return cRightParenthesisKeyword_4_7; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//then=[Mode]
		public Assignment getThenAssignment_6() { return cThenAssignment_6; }
		
		//[Mode]
		public CrossReference getThenModeCrossReference_6_0() { return cThenModeCrossReference_6_0; }
		
		//ID
		public RuleCall getThenModeIDTerminalRuleCall_6_0_1() { return cThenModeIDTerminalRuleCall_6_0_1; }
		
		//('else' else=[Mode])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//else=[Mode]
		public Assignment getElseAssignment_7_1() { return cElseAssignment_7_1; }
		
		//[Mode]
		public CrossReference getElseModeCrossReference_7_1_0() { return cElseModeCrossReference_7_1_0; }
		
		//ID
		public RuleCall getElseModeIDTerminalRuleCall_7_1_0_1() { return cElseModeIDTerminalRuleCall_7_1_0_1; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//Event :
		//    'Event' name=ID
		//    'description' description=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Event' name=ID
		//'description' description=STRING
		public Group getGroup() { return cGroup; }
		
		//'Event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
	}
	
	public class SUPPORTED_OPERATING_SYSTEMSElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.SUPPORTED_OPERATING_SYSTEMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWindowsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWindowsWindowsKeyword_0_0 = (Keyword)cWindowsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLinuxEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLinuxLinuxKeyword_1_0 = (Keyword)cLinuxEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SUPPORTED_OPERATING_SYSTEMS:
		//    Windows|Linux
		//;
		public EnumRule getRule() { return rule; }
		
		//Windows|Linux
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Windows
		public EnumLiteralDeclaration getWindowsEnumLiteralDeclaration_0() { return cWindowsEnumLiteralDeclaration_0; }
		
		public Keyword getWindowsWindowsKeyword_0_0() { return cWindowsWindowsKeyword_0_0; }
		
		//Linux
		public EnumLiteralDeclaration getLinuxEnumLiteralDeclaration_1() { return cLinuxEnumLiteralDeclaration_1; }
		
		public Keyword getLinuxLinuxKeyword_1_0() { return cLinuxLinuxKeyword_1_0; }
	}
	public class SUPPORTED_DISTRIBUTIONSElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.SUPPORTED_DISTRIBUTIONS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDebianEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDebianDebianKeyword_0_0 = (Keyword)cDebianEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUbuntuEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUbuntuUbuntuKeyword_1_0 = (Keyword)cUbuntuEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOtherEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOtherOtherKeyword_2_0 = (Keyword)cOtherEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SUPPORTED_DISTRIBUTIONS:
		//    Debian|Ubuntu|Other
		//;
		public EnumRule getRule() { return rule; }
		
		//Debian|Ubuntu|Other
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Debian
		public EnumLiteralDeclaration getDebianEnumLiteralDeclaration_0() { return cDebianEnumLiteralDeclaration_0; }
		
		public Keyword getDebianDebianKeyword_0_0() { return cDebianDebianKeyword_0_0; }
		
		//Ubuntu
		public EnumLiteralDeclaration getUbuntuEnumLiteralDeclaration_1() { return cUbuntuEnumLiteralDeclaration_1; }
		
		public Keyword getUbuntuUbuntuKeyword_1_0() { return cUbuntuUbuntuKeyword_1_0; }
		
		//Other
		public EnumLiteralDeclaration getOtherEnumLiteralDeclaration_2() { return cOtherEnumLiteralDeclaration_2; }
		
		public Keyword getOtherOtherKeyword_2_0() { return cOtherOtherKeyword_2_0; }
	}
	public class SUPPORTED_RELEASESElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.SUPPORTED_RELEASES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBusterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBusterBusterKeyword_0_0 = (Keyword)cBusterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOtherEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOtherOtherKeyword_1_0 = (Keyword)cOtherEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SUPPORTED_RELEASES:
		//    Buster|Other
		//;
		public EnumRule getRule() { return rule; }
		
		//Buster|Other
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Buster
		public EnumLiteralDeclaration getBusterEnumLiteralDeclaration_0() { return cBusterEnumLiteralDeclaration_0; }
		
		public Keyword getBusterBusterKeyword_0_0() { return cBusterBusterKeyword_0_0; }
		
		//Other
		public EnumLiteralDeclaration getOtherEnumLiteralDeclaration_1() { return cOtherEnumLiteralDeclaration_1; }
		
		public Keyword getOtherOtherKeyword_1_0() { return cOtherOtherKeyword_1_0; }
	}
	public class EnabledElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mdsl.Mdsl.Enabled");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Enabled:
		//    true | false //default: true. disabled for e.g. maintenance mode
		//;
		public EnumRule getRule() { return rule; }
		
		//true | false
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }
		
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }
		
		//false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }
		
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final DeclarationElements pDeclaration;
	private final SystemElements pSystem;
	private final SUPPORTED_OPERATING_SYSTEMSElements eSUPPORTED_OPERATING_SYSTEMS;
	private final SUPPORTED_DISTRIBUTIONSElements eSUPPORTED_DISTRIBUTIONS;
	private final SUPPORTED_RELEASESElements eSUPPORTED_RELEASES;
	private final SoftwareElements pSoftware;
	private final ModeElements pMode;
	private final EnabledElements eEnabled;
	private final ServiceElements pService;
	private final ActionWithParamsElements pActionWithParams;
	private final ActionElements pAction;
	private final RuleElements pRule;
	private final EventElements pEvent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDeclaration = new DeclarationElements();
		this.pSystem = new SystemElements();
		this.eSUPPORTED_OPERATING_SYSTEMS = new SUPPORTED_OPERATING_SYSTEMSElements();
		this.eSUPPORTED_DISTRIBUTIONS = new SUPPORTED_DISTRIBUTIONSElements();
		this.eSUPPORTED_RELEASES = new SUPPORTED_RELEASESElements();
		this.pSoftware = new SoftwareElements();
		this.pMode = new ModeElements();
		this.eEnabled = new EnabledElements();
		this.pService = new ServiceElements();
		this.pActionWithParams = new ActionWithParamsElements();
		this.pAction = new ActionElements();
		this.pRule = new RuleElements();
		this.pEvent = new EventElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.mdsl.Mdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model: (declarations+=Declaration)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Declaration : System | Software | Mode | Service | Action | Rule | Event;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//System :
	//    'System' name=ID 'has' 'following' 'modes'
	//        (modes+=[Mode] (',' modes+=[Mode])*)?
	//    ('operatingSystem' operatingSystem=SUPPORTED_OPERATING_SYSTEMS)?
	//    ('distribution' distribution=SUPPORTED_DISTRIBUTIONS)?
	//    ('release' release=SUPPORTED_RELEASES)?
	//;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//enum SUPPORTED_OPERATING_SYSTEMS:
	//    Windows|Linux
	//;
	public SUPPORTED_OPERATING_SYSTEMSElements getSUPPORTED_OPERATING_SYSTEMSAccess() {
		return eSUPPORTED_OPERATING_SYSTEMS;
	}
	
	public EnumRule getSUPPORTED_OPERATING_SYSTEMSRule() {
		return getSUPPORTED_OPERATING_SYSTEMSAccess().getRule();
	}
	
	//enum SUPPORTED_DISTRIBUTIONS:
	//    Debian|Ubuntu|Other
	//;
	public SUPPORTED_DISTRIBUTIONSElements getSUPPORTED_DISTRIBUTIONSAccess() {
		return eSUPPORTED_DISTRIBUTIONS;
	}
	
	public EnumRule getSUPPORTED_DISTRIBUTIONSRule() {
		return getSUPPORTED_DISTRIBUTIONSAccess().getRule();
	}
	
	//enum SUPPORTED_RELEASES:
	//    Buster|Other
	//;
	public SUPPORTED_RELEASESElements getSUPPORTED_RELEASESAccess() {
		return eSUPPORTED_RELEASES;
	}
	
	public EnumRule getSUPPORTED_RELEASESRule() {
		return getSUPPORTED_RELEASESAccess().getRule();
	}
	
	//Software :
	//    'Software' name=ID //software with a dot in the name should be specified in the package e.g. php7 package "php7.3"
	//    ('vendor' vendor=STRING)?
	//    ('product' product=STRING)?
	//    ('version' version=STRING)?
	//    ('package' package=STRING)?
	//;
	public SoftwareElements getSoftwareAccess() {
		return pSoftware;
	}
	
	public ParserRule getSoftwareRule() {
		return getSoftwareAccess().getRule();
	}
	
	//Mode :
	//    'Mode' name=ID ('extends' superMode=[Mode])?
	//    'description' description=STRING
	//    'priority' priority=INT
	//    'startServices' (startServices+=[Service]
	//        (',' startServices+=[Service])*
	//    )?
	//    'stopServices' (stopServices+=[Service]
	//        (',' stopServices+=[Service])*
	//    )?
	//    (enabled=Enabled)?
	//    ('exchangeable' 'with' alternativeMode=[Mode])?
	//;
	public ModeElements getModeAccess() {
		return pMode;
	}
	
	public ParserRule getModeRule() {
		return getModeAccess().getRule();
	}
	
	//enum Enabled:
	//    true | false //default: true. disabled for e.g. maintenance mode
	//;
	public EnabledElements getEnabledAccess() {
		return eEnabled;
	}
	
	public EnumRule getEnabledRule() {
		return getEnabledAccess().getRule();
	}
	
	//Service :
	//    'Service' name=ID
	//    ('usesSoftware' usesSoftware+=[Software] (',' usesSoftware+=[Software])*)?
	//    'startActions' startActions+=ActionWithParams
	//        (',' startActions+=ActionWithParams)*
	//    'stopActions' stopActions+=ActionWithParams
	//        (',' stopActions+=ActionWithParams)*
	//;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//ActionWithParams :
	//    action=[Action]'('(params+=STRING (',' params+=STRING)*)?')'
	//;
	public ActionWithParamsElements getActionWithParamsAccess() {
		return pActionWithParams;
	}
	
	public ParserRule getActionWithParamsRule() {
		return getActionWithParamsAccess().getRule();
	}
	
	//Action :
	//    'Action' name=ID ('extends' superAction=[Action])?
	//    ('description' description=STRING)?
	//    (('shellCmd' shellCmd=STRING)|('params' params+=STRING (',' params+=STRING)*))
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Rule :
	//    'Rule' description=STRING
	//        'if' if+=[Event]
	//        ('and' 'current' 'mode' 'in' '('currentMode+=[Mode]
	//            (',' modes+=[Mode])*')'
	//        )?
	//        'then' then=[Mode]
	//        ('else' else=[Mode])?
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Event :
	//    'Event' name=ID
	//    'description' description=STRING
	//;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
