/**
 * generated by Xtext 2.25.0
 */
package org.xtext.mdsl.mdsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.mdsl.mdsl.ActionWithParams;
import org.xtext.mdsl.mdsl.MdslPackage;
import org.xtext.mdsl.mdsl.Service;
import org.xtext.mdsl.mdsl.Software;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Service</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ServiceImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ServiceImpl#getUsesSoftware <em>Uses Software</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ServiceImpl#getStartActions <em>Start Actions</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ServiceImpl#getStopActions <em>Stop Actions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ServiceImpl extends DeclarationImpl implements Service
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getUsesSoftware() <em>Uses Software</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUsesSoftware()
   * @generated
   * @ordered
   */
  protected EList<Software> usesSoftware;

  /**
   * The cached value of the '{@link #getStartActions() <em>Start Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartActions()
   * @generated
   * @ordered
   */
  protected EList<ActionWithParams> startActions;

  /**
   * The cached value of the '{@link #getStopActions() <em>Stop Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStopActions()
   * @generated
   * @ordered
   */
  protected EList<ActionWithParams> stopActions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServiceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MdslPackage.Literals.SERVICE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.SERVICE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Software> getUsesSoftware()
  {
    if (usesSoftware == null)
    {
      usesSoftware = new EObjectResolvingEList<Software>(Software.class, this, MdslPackage.SERVICE__USES_SOFTWARE);
    }
    return usesSoftware;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ActionWithParams> getStartActions()
  {
    if (startActions == null)
    {
      startActions = new EObjectContainmentEList<ActionWithParams>(ActionWithParams.class, this, MdslPackage.SERVICE__START_ACTIONS);
    }
    return startActions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ActionWithParams> getStopActions()
  {
    if (stopActions == null)
    {
      stopActions = new EObjectContainmentEList<ActionWithParams>(ActionWithParams.class, this, MdslPackage.SERVICE__STOP_ACTIONS);
    }
    return stopActions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MdslPackage.SERVICE__START_ACTIONS:
        return ((InternalEList<?>)getStartActions()).basicRemove(otherEnd, msgs);
      case MdslPackage.SERVICE__STOP_ACTIONS:
        return ((InternalEList<?>)getStopActions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MdslPackage.SERVICE__NAME:
        return getName();
      case MdslPackage.SERVICE__USES_SOFTWARE:
        return getUsesSoftware();
      case MdslPackage.SERVICE__START_ACTIONS:
        return getStartActions();
      case MdslPackage.SERVICE__STOP_ACTIONS:
        return getStopActions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MdslPackage.SERVICE__NAME:
        setName((String)newValue);
        return;
      case MdslPackage.SERVICE__USES_SOFTWARE:
        getUsesSoftware().clear();
        getUsesSoftware().addAll((Collection<? extends Software>)newValue);
        return;
      case MdslPackage.SERVICE__START_ACTIONS:
        getStartActions().clear();
        getStartActions().addAll((Collection<? extends ActionWithParams>)newValue);
        return;
      case MdslPackage.SERVICE__STOP_ACTIONS:
        getStopActions().clear();
        getStopActions().addAll((Collection<? extends ActionWithParams>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MdslPackage.SERVICE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MdslPackage.SERVICE__USES_SOFTWARE:
        getUsesSoftware().clear();
        return;
      case MdslPackage.SERVICE__START_ACTIONS:
        getStartActions().clear();
        return;
      case MdslPackage.SERVICE__STOP_ACTIONS:
        getStopActions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MdslPackage.SERVICE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MdslPackage.SERVICE__USES_SOFTWARE:
        return usesSoftware != null && !usesSoftware.isEmpty();
      case MdslPackage.SERVICE__START_ACTIONS:
        return startActions != null && !startActions.isEmpty();
      case MdslPackage.SERVICE__STOP_ACTIONS:
        return stopActions != null && !stopActions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ServiceImpl
