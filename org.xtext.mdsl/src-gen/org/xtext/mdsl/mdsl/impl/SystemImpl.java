/**
 * generated by Xtext 2.25.0
 */
package org.xtext.mdsl.mdsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.mdsl.mdsl.MdslPackage;
import org.xtext.mdsl.mdsl.Mode;
import org.xtext.mdsl.mdsl.SUPPORTED_DISTRIBUTIONS;
import org.xtext.mdsl.mdsl.SUPPORTED_OPERATING_SYSTEMS;
import org.xtext.mdsl.mdsl.SUPPORTED_RELEASES;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>System</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.SystemImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.SystemImpl#getModes <em>Modes</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.SystemImpl#getOperatingSystem <em>Operating System</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.SystemImpl#getDistribution <em>Distribution</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.SystemImpl#getRelease <em>Release</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SystemImpl extends DeclarationImpl implements org.xtext.mdsl.mdsl.System
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getModes() <em>Modes</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModes()
   * @generated
   * @ordered
   */
  protected EList<Mode> modes;

  /**
   * The default value of the '{@link #getOperatingSystem() <em>Operating System</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperatingSystem()
   * @generated
   * @ordered
   */
  protected static final SUPPORTED_OPERATING_SYSTEMS OPERATING_SYSTEM_EDEFAULT = SUPPORTED_OPERATING_SYSTEMS.WINDOWS;

  /**
   * The cached value of the '{@link #getOperatingSystem() <em>Operating System</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperatingSystem()
   * @generated
   * @ordered
   */
  protected SUPPORTED_OPERATING_SYSTEMS operatingSystem = OPERATING_SYSTEM_EDEFAULT;

  /**
   * The default value of the '{@link #getDistribution() <em>Distribution</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDistribution()
   * @generated
   * @ordered
   */
  protected static final SUPPORTED_DISTRIBUTIONS DISTRIBUTION_EDEFAULT = SUPPORTED_DISTRIBUTIONS.DEBIAN;

  /**
   * The cached value of the '{@link #getDistribution() <em>Distribution</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDistribution()
   * @generated
   * @ordered
   */
  protected SUPPORTED_DISTRIBUTIONS distribution = DISTRIBUTION_EDEFAULT;

  /**
   * The default value of the '{@link #getRelease() <em>Release</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelease()
   * @generated
   * @ordered
   */
  protected static final SUPPORTED_RELEASES RELEASE_EDEFAULT = SUPPORTED_RELEASES.BUSTER;

  /**
   * The cached value of the '{@link #getRelease() <em>Release</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelease()
   * @generated
   * @ordered
   */
  protected SUPPORTED_RELEASES release = RELEASE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SystemImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MdslPackage.Literals.SYSTEM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.SYSTEM__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Mode> getModes()
  {
    if (modes == null)
    {
      modes = new EObjectResolvingEList<Mode>(Mode.class, this, MdslPackage.SYSTEM__MODES);
    }
    return modes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SUPPORTED_OPERATING_SYSTEMS getOperatingSystem()
  {
    return operatingSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperatingSystem(SUPPORTED_OPERATING_SYSTEMS newOperatingSystem)
  {
    SUPPORTED_OPERATING_SYSTEMS oldOperatingSystem = operatingSystem;
    operatingSystem = newOperatingSystem == null ? OPERATING_SYSTEM_EDEFAULT : newOperatingSystem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.SYSTEM__OPERATING_SYSTEM, oldOperatingSystem, operatingSystem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SUPPORTED_DISTRIBUTIONS getDistribution()
  {
    return distribution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDistribution(SUPPORTED_DISTRIBUTIONS newDistribution)
  {
    SUPPORTED_DISTRIBUTIONS oldDistribution = distribution;
    distribution = newDistribution == null ? DISTRIBUTION_EDEFAULT : newDistribution;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.SYSTEM__DISTRIBUTION, oldDistribution, distribution));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SUPPORTED_RELEASES getRelease()
  {
    return release;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRelease(SUPPORTED_RELEASES newRelease)
  {
    SUPPORTED_RELEASES oldRelease = release;
    release = newRelease == null ? RELEASE_EDEFAULT : newRelease;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.SYSTEM__RELEASE, oldRelease, release));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MdslPackage.SYSTEM__NAME:
        return getName();
      case MdslPackage.SYSTEM__MODES:
        return getModes();
      case MdslPackage.SYSTEM__OPERATING_SYSTEM:
        return getOperatingSystem();
      case MdslPackage.SYSTEM__DISTRIBUTION:
        return getDistribution();
      case MdslPackage.SYSTEM__RELEASE:
        return getRelease();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MdslPackage.SYSTEM__NAME:
        setName((String)newValue);
        return;
      case MdslPackage.SYSTEM__MODES:
        getModes().clear();
        getModes().addAll((Collection<? extends Mode>)newValue);
        return;
      case MdslPackage.SYSTEM__OPERATING_SYSTEM:
        setOperatingSystem((SUPPORTED_OPERATING_SYSTEMS)newValue);
        return;
      case MdslPackage.SYSTEM__DISTRIBUTION:
        setDistribution((SUPPORTED_DISTRIBUTIONS)newValue);
        return;
      case MdslPackage.SYSTEM__RELEASE:
        setRelease((SUPPORTED_RELEASES)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MdslPackage.SYSTEM__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MdslPackage.SYSTEM__MODES:
        getModes().clear();
        return;
      case MdslPackage.SYSTEM__OPERATING_SYSTEM:
        setOperatingSystem(OPERATING_SYSTEM_EDEFAULT);
        return;
      case MdslPackage.SYSTEM__DISTRIBUTION:
        setDistribution(DISTRIBUTION_EDEFAULT);
        return;
      case MdslPackage.SYSTEM__RELEASE:
        setRelease(RELEASE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MdslPackage.SYSTEM__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MdslPackage.SYSTEM__MODES:
        return modes != null && !modes.isEmpty();
      case MdslPackage.SYSTEM__OPERATING_SYSTEM:
        return operatingSystem != OPERATING_SYSTEM_EDEFAULT;
      case MdslPackage.SYSTEM__DISTRIBUTION:
        return distribution != DISTRIBUTION_EDEFAULT;
      case MdslPackage.SYSTEM__RELEASE:
        return release != RELEASE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", operatingSystem: ");
    result.append(operatingSystem);
    result.append(", distribution: ");
    result.append(distribution);
    result.append(", release: ");
    result.append(release);
    result.append(')');
    return result.toString();
  }

} //SystemImpl
