/**
 * generated by Xtext 2.25.0
 */
package org.xtext.mdsl.mdsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.mdsl.mdsl.Enabled;
import org.xtext.mdsl.mdsl.MdslPackage;
import org.xtext.mdsl.mdsl.Mode;
import org.xtext.mdsl.mdsl.Service;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mode</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ModeImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ModeImpl#getSuperMode <em>Super Mode</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ModeImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ModeImpl#getPriority <em>Priority</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ModeImpl#getStartServices <em>Start Services</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ModeImpl#getStopServices <em>Stop Services</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ModeImpl#getEnabled <em>Enabled</em>}</li>
 *   <li>{@link org.xtext.mdsl.mdsl.impl.ModeImpl#getAlternativeMode <em>Alternative Mode</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModeImpl extends DeclarationImpl implements Mode
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSuperMode() <em>Super Mode</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperMode()
   * @generated
   * @ordered
   */
  protected Mode superMode;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The default value of the '{@link #getPriority() <em>Priority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPriority()
   * @generated
   * @ordered
   */
  protected static final int PRIORITY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPriority() <em>Priority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPriority()
   * @generated
   * @ordered
   */
  protected int priority = PRIORITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getStartServices() <em>Start Services</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartServices()
   * @generated
   * @ordered
   */
  protected EList<Service> startServices;

  /**
   * The cached value of the '{@link #getStopServices() <em>Stop Services</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStopServices()
   * @generated
   * @ordered
   */
  protected EList<Service> stopServices;

  /**
   * The default value of the '{@link #getEnabled() <em>Enabled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnabled()
   * @generated
   * @ordered
   */
  protected static final Enabled ENABLED_EDEFAULT = Enabled.TRUE;

  /**
   * The cached value of the '{@link #getEnabled() <em>Enabled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnabled()
   * @generated
   * @ordered
   */
  protected Enabled enabled = ENABLED_EDEFAULT;

  /**
   * The cached value of the '{@link #getAlternativeMode() <em>Alternative Mode</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlternativeMode()
   * @generated
   * @ordered
   */
  protected Mode alternativeMode;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MdslPackage.Literals.MODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.MODE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mode getSuperMode()
  {
    if (superMode != null && superMode.eIsProxy())
    {
      InternalEObject oldSuperMode = (InternalEObject)superMode;
      superMode = (Mode)eResolveProxy(oldSuperMode);
      if (superMode != oldSuperMode)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MdslPackage.MODE__SUPER_MODE, oldSuperMode, superMode));
      }
    }
    return superMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mode basicGetSuperMode()
  {
    return superMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSuperMode(Mode newSuperMode)
  {
    Mode oldSuperMode = superMode;
    superMode = newSuperMode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.MODE__SUPER_MODE, oldSuperMode, superMode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.MODE__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getPriority()
  {
    return priority;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPriority(int newPriority)
  {
    int oldPriority = priority;
    priority = newPriority;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.MODE__PRIORITY, oldPriority, priority));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Service> getStartServices()
  {
    if (startServices == null)
    {
      startServices = new EObjectResolvingEList<Service>(Service.class, this, MdslPackage.MODE__START_SERVICES);
    }
    return startServices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Service> getStopServices()
  {
    if (stopServices == null)
    {
      stopServices = new EObjectResolvingEList<Service>(Service.class, this, MdslPackage.MODE__STOP_SERVICES);
    }
    return stopServices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Enabled getEnabled()
  {
    return enabled;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnabled(Enabled newEnabled)
  {
    Enabled oldEnabled = enabled;
    enabled = newEnabled == null ? ENABLED_EDEFAULT : newEnabled;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.MODE__ENABLED, oldEnabled, enabled));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mode getAlternativeMode()
  {
    if (alternativeMode != null && alternativeMode.eIsProxy())
    {
      InternalEObject oldAlternativeMode = (InternalEObject)alternativeMode;
      alternativeMode = (Mode)eResolveProxy(oldAlternativeMode);
      if (alternativeMode != oldAlternativeMode)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MdslPackage.MODE__ALTERNATIVE_MODE, oldAlternativeMode, alternativeMode));
      }
    }
    return alternativeMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mode basicGetAlternativeMode()
  {
    return alternativeMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlternativeMode(Mode newAlternativeMode)
  {
    Mode oldAlternativeMode = alternativeMode;
    alternativeMode = newAlternativeMode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdslPackage.MODE__ALTERNATIVE_MODE, oldAlternativeMode, alternativeMode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MdslPackage.MODE__NAME:
        return getName();
      case MdslPackage.MODE__SUPER_MODE:
        if (resolve) return getSuperMode();
        return basicGetSuperMode();
      case MdslPackage.MODE__DESCRIPTION:
        return getDescription();
      case MdslPackage.MODE__PRIORITY:
        return getPriority();
      case MdslPackage.MODE__START_SERVICES:
        return getStartServices();
      case MdslPackage.MODE__STOP_SERVICES:
        return getStopServices();
      case MdslPackage.MODE__ENABLED:
        return getEnabled();
      case MdslPackage.MODE__ALTERNATIVE_MODE:
        if (resolve) return getAlternativeMode();
        return basicGetAlternativeMode();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MdslPackage.MODE__NAME:
        setName((String)newValue);
        return;
      case MdslPackage.MODE__SUPER_MODE:
        setSuperMode((Mode)newValue);
        return;
      case MdslPackage.MODE__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case MdslPackage.MODE__PRIORITY:
        setPriority((Integer)newValue);
        return;
      case MdslPackage.MODE__START_SERVICES:
        getStartServices().clear();
        getStartServices().addAll((Collection<? extends Service>)newValue);
        return;
      case MdslPackage.MODE__STOP_SERVICES:
        getStopServices().clear();
        getStopServices().addAll((Collection<? extends Service>)newValue);
        return;
      case MdslPackage.MODE__ENABLED:
        setEnabled((Enabled)newValue);
        return;
      case MdslPackage.MODE__ALTERNATIVE_MODE:
        setAlternativeMode((Mode)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MdslPackage.MODE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MdslPackage.MODE__SUPER_MODE:
        setSuperMode((Mode)null);
        return;
      case MdslPackage.MODE__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case MdslPackage.MODE__PRIORITY:
        setPriority(PRIORITY_EDEFAULT);
        return;
      case MdslPackage.MODE__START_SERVICES:
        getStartServices().clear();
        return;
      case MdslPackage.MODE__STOP_SERVICES:
        getStopServices().clear();
        return;
      case MdslPackage.MODE__ENABLED:
        setEnabled(ENABLED_EDEFAULT);
        return;
      case MdslPackage.MODE__ALTERNATIVE_MODE:
        setAlternativeMode((Mode)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MdslPackage.MODE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MdslPackage.MODE__SUPER_MODE:
        return superMode != null;
      case MdslPackage.MODE__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case MdslPackage.MODE__PRIORITY:
        return priority != PRIORITY_EDEFAULT;
      case MdslPackage.MODE__START_SERVICES:
        return startServices != null && !startServices.isEmpty();
      case MdslPackage.MODE__STOP_SERVICES:
        return stopServices != null && !stopServices.isEmpty();
      case MdslPackage.MODE__ENABLED:
        return enabled != ENABLED_EDEFAULT;
      case MdslPackage.MODE__ALTERNATIVE_MODE:
        return alternativeMode != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", description: ");
    result.append(description);
    result.append(", priority: ");
    result.append(priority);
    result.append(", enabled: ");
    result.append(enabled);
    result.append(')');
    return result.toString();
  }

} //ModeImpl
